#!/bin/bash
#
# bdeploy
# Version:     0.9 beta
# Description: Bash-based Deployment Script
# Author:      Nick Sagona
# Copyright:   2012
# License:     New BSD License https://raw.github.com/nicksagona/bdeploy/master/LICENSE.TXT
#
# Requires SSH keys to be properly configured to facilitate
# connecting to and transferring to the servers
#

#
# Define some variables
#
CURDIR="$(pwd)"
CONF="$CURDIR/.bdconf"
ACTION=
FIRST=
PREV=
CURRENT=
CURNUM=0
PUSHDB=false
HELP="\n

A simple bash-based deployment script.\n\n

USAGE: ./deploy -d\n\n

-h, --help\t : Show this help screen.\n
-c, --check\t : Check the date of the last deployment.\n
-d, --deploy\t : Deploy the current project\n
-i, --info\t : Information on the current configuration.\n
-r, --rollback\t : Rollback to the last deployment.\n
-s, --setup\t : Set up the initial files and directories.\n

"

#
# Define some functions
#
# Function to set default values
function set_defaults()
{
    # Set some defaults
    if [ "$TEST_SERVER" = "" ]; then
        TEST_SERVER="localhost"
    fi

    if [ "$TEST_DEST" = "" ]; then
        TEST_DEST="$CURDIR"
    fi

    if [ "$TEST_USER" = "" ]; then
        TEST_USER="$(whoami)"
    fi

    if [ "$LIVE_SERVER" = "" ]; then
        LIVE_SERVER="localhost"
    fi

    if [ "$LIVE_USER" = "" ]; then
        LIVE_USER="$(whoami)"
    fi

    # Check if a database is present
    if [ "$TEST_DB" != "" ] && [ "$TEST_DBHOST" != "" ] && [ "$TEST_DBUSER" != "" ] &&
       [ "$LIVE_DB" != "" ] && [ "$LIVE_DBHOST" != "" ] && [ "$LIVE_DBUSER" != "" ]; then
        PUSHDB=true
    fi
}

# Function to get the current release
function get_current()
{
    if [ "$LIVE_SERVER" = "localhost" ]; then
        DIRS="$(ls "$LIVE_DEST/releases")"
    else
        DIRS="$(ssh "$LIVE_USER@$LIVE_SERVER" ls "$LIVE_DEST/releases")"
    fi
    for D in $DIRS
    do
        if [ "$FIRST" = "" ]; then
            FIRST="$D"
        fi
        CURRENT="$D"
        let "CURNUM++"
    done
}

# Function to get the previous release
function get_prev()
{
    get_current
    if [ "$LIVE_SERVER" = "localhost" ]; then
        DIRS="$(ls "$LIVE_DEST/releases")"
    else
        DIRS="$(ssh "$LIVE_USER@$LIVE_SERVER" ls "$LIVE_DEST/releases")"
    fi

    for D in $DIRS
    do
        if [ "$D" != "$CURRENT" ]; then
            PREV="$D"
        fi
    done
}

# Check for the conf file
if [ ! -f "$CONF" ]; then
    echo -e "Could not file the .bdconf file.\n"
    exit 0
fi

# Source the conf file and set the defaults
source $CONF
set_defaults

# Parse arguments from the 'getopt' command
TEMP=`getopt -o hcdirs --long help,check,deploy,info,rollback,setup \
     -n 'Error' -- "$@"`

while true ; do
    case "$1" in
        -h|--help) echo -e $HELP ; exit 1 ;;
        -c|--check) ACTION="check" ; shift 1 ;;
        -d|--deploy) ACTION="deploy" ; shift 1 ;;
        -i|--info) ACTION="info" ; shift 1 ;;
        -r|--rollback) ACTION="rollback" ; shift 1 ;;
        -s|--setup) ACTION="setup" ; shift 1 ;;
        *) break ;;
    esac
done

# Get to work
if [ "$ACTION" = "deploy" ]; then
    if [ ! -d "current" ]; then
        echo -e "\nThere is nothing to deploy. This directory has not been set up yet.\n"
    else
        DIRS="$(ls ./releases)"
        if [ "$DIRS" != "current" ]; then
            get_current
        fi

        # Clean up the history
        if [ "$HISTORY" -ne "0" ] && [ "$CURNUM" -eq "$HISTORY" ] && [ "$FIRST" != "" ] && [ -d "./releases/$FIRST" ]; then
            rm -fdr "./releases/$FIRST"
            if [ "$LIVE_SERVER" = "localhost" ]; then
                rm -fdr "$LIVE_DEST/releases/$FIRST"
            else
                ssh "$LIVE_USER@$LIVE_SERVER" rm -fdr "$LIVE_DEST/releases/$FIRST"
            fi
        fi

        echo -e "\nDeploying...\n"

        TIME="$(date +%s)"
        CHK=false

        if [ "$LIVE_SERVER" = "localhost" ]; then
            DIRS="$(ls "$LIVE_DEST")"
        else
            DIRS="$(ssh "$LIVE_USER@$LIVE_SERVER" ls "$LIVE_DEST")"
        fi

        for D in $DIRS
        do
            if [ "$D" = "current" ]; then
                CHK=true
            fi
        done

        # Copy the current version to a time-stamped directory
        cp -rp "./releases/current" "./releases/$TIME"

        # Dump the database
        if $PUSHDB ; then
            if [ "$DB_TYPE" = "pgsql" ]; then
                echo -e "\nEnter the test environment PostgreSQL password:"
                pg_dump -c -U "$TEST_DBUSER" --host="$TEST_DBHOST" "$TEST_DB" > "./releases/$TIME/db.sql"
            elif [ "$DB_TYPE" = "mysql" ]; then
                mysqldump -u "$TEST_DBUSER" --password="$TEST_DBPASS" --host="$TEST_DBHOST" "$TEST_DB" > "./releases/$TIME/db.sql"
            fi
        fi

        # Package up the current version and send it over to the live server
        tar -cvjpf "release-$TIME.tar.bz2" "./releases/$TIME"

        if [ "$LIVE_SERVER" = "localhost" ]; then
            cp "release-$TIME.tar.bz2" "$LIVE_DEST"
            tar -xvjpf "$LIVE_DEST/release-$TIME.tar.bz2" -C "$LIVE_DEST"
        else
            scp "release-$TIME.tar.bz2" "$LIVE_USER@$LIVE_SERVER:$LIVE_DEST"
            ssh "$LIVE_USER@$LIVE_SERVER" "tar -xvjpf $LIVE_DEST/release-$TIME.tar.bz2 -C $LIVE_DEST"
        fi

        # Import the databse
        if $PUSHDB ; then
            echo -e "\nMigrating the database..."
            if [ "$DB_TYPE" = "pgsql" ]; then
                echo -e "\nEnter the live environment PostgreSQL password:"
                if [ "$LIVE_SERVER" = "localhost" ]; then
                    psql -U "$LIVE_DBUSER" --host="$LIVE_DBHOST" "$LIVE_DB" < "$LIVE_DEST/releases/$TIME/db.sql"
                else
                    ssh -t "$LIVE_USER@$LIVE_SERVER" "psql -U $LIVE_DBUSER --host=$LIVE_DBHOST $LIVE_DB < $LIVE_DEST/releases/$TIME/db.sql"
                fi
            elif [ "$DB_TYPE" = "mysql" ]; then
                if [ "$LIVE_SERVER" = "localhost" ]; then
                    mysql -u "$LIVE_DBUSER" --password="$LIVE_DBPASS" --host="$LIVE_DBHOST" "$LIVE_DB" < "$LIVE_DEST/releases/$TIME/db.sql"
                else
                    ssh "$LIVE_USER@$LIVE_SERVER" "mysql -u $LIVE_DBUSER --password=$LIVE_DBPASS --host=$LIVE_DBHOST $LIVE_DB < $LIVE_DEST/releases/$TIME/db.sql"
                fi
            fi
        fi

        # Some clean up, remove current symlink and create new one on the live server
        if $CHK ; then
            if [ "$LIVE_SERVER" = "localhost" ]; then
                rm -f "$LIVE_DEST/current"
            else
                ssh "$LIVE_USER@$LIVE_SERVER" rm -f "$LIVE_DEST/current"
            fi
        fi

        if [ "$LIVE_SERVER" = "localhost" ]; then
            ln -s "$LIVE_DEST/releases/$TIME" "$LIVE_DEST/current"
        else
            ssh "$LIVE_USER@$LIVE_SERVER" ln -s "$LIVE_DEST/releases/$TIME" "$LIVE_DEST/current"
        fi

        # Remove temporary archives
        rm -f "release-$TIME.tar.bz2"

        if [ "$LIVE_SERVER" = "localhost" ]; then
            rm -f "$LIVE_DEST/release-$TIME.tar.bz2"
        else
            ssh "$LIVE_USER@$LIVE_SERVER" rm -f "$LIVE_DEST/release-$TIME.tar.bz2"
        fi

        echo -e "\nDone!\n"
    fi
elif [ "$ACTION" = "info" ]; then
    echo -e "\nGlobal Settings:"
    echo -e "----------------"
    echo -e "History:       $HISTORY"
    echo -e "Database Type: $DB_TYPE"

    echo -e "\nCurrent Test Environment:"
    echo -e "-------------------------"
    echo -e "Server:        $TEST_SERVER"
    echo -e "Destination:   $TEST_DEST"
    echo -e "User:          $TEST_USER"
    echo -e "Database:      $TEST_DB"
    echo -e "DB Host:       $TEST_DBHOST"
    echo -e "DB User:       $TEST_DBUSER"
    echo -e "DB Password:   $TEST_DBPASS\n"

    echo -e "Current Live Environment:"
    echo -e "-------------------------"
    echo -e "Server:        $LIVE_SERVER"
    echo -e "Destination:   $LIVE_DEST"
    echo -e "User:          $LIVE_USER"
    echo -e "Database:      $LIVE_DB"
    echo -e "DB Host:       $LIVE_DBHOST"
    echo -e "DB User:       $LIVE_DBUSER"
    echo -e "DB Password:   $LIVE_DBPASS\n"
elif [ "$ACTION" = "rollback" ]; then
    DIRS="$(ls ./releases)"
    if [ ! -d "current" ]; then
        echo -e "\nThere is nothing to roll back. This directory has not been set up yet.\n"
    elif [ "$DIRS" = "current" ]; then
        echo -e "\nThere is nothing to roll back. This application has not been deployed yet.\n"
    else
        get_prev
        if [ "$PREV" != "" ]; then
            echo -e "\nRolling back to the previous deployment..."

            # Remove current version and copy previous over on the test server
            rm -fdr ./releases/current
            rm -fdr "./releases/$CURRENT"
            cp -rp "./releases/$PREV" ./releases/current

            # Remove current version and copy previous over on the live server
            if [ "$LIVE_SERVER" = "localhost" ]; then
                rm -fdr "$LIVE_DEST/releases/$CURRENT"
                rm -f "$LIVE_DEST/current"
                ln -s "$LIVE_DEST/releases/$PREV" "$LIVE_DEST/current"
            else
                ssh "$LIVE_USER@$LIVE_SERVER" rm -fdr "$LIVE_DEST/releases/$CURRENT"
                ssh "$LIVE_USER@$LIVE_SERVER" rm -f "$LIVE_DEST/current"
                ssh "$LIVE_USER@$LIVE_SERVER" ln -s "$LIVE_DEST/releases/$PREV" "$LIVE_DEST/current"
            fi

            # Restore the previous database
            if $PUSHDB ; then
                echo -e "\nRestoring the database..."
                if [ "$DB_TYPE" = "pgsql" ]; then
                    echo -e "\nEnter the test environment PostgreSQL password:"
                    psql -U "$TEST_DBUSER" "--host=$TEST_DBHOST" "$TEST_DB" < "./releases/$PREV/db.sql"
                    echo -e "\nEnter the live environment PostgreSQL password:"
                    if [ "$LIVE_SERVER" = "localhost" ]; then
                        psql -U "$LIVE_DBUSER" --host="$LIVE_DBHOST" "$LIVE_DB" < "$LIVE_DEST/releases/$PREV/db.sql"
                    else
                        ssh -t "$LIVE_USER@$LIVE_SERVER" "psql -U $LIVE_DBUSER --host=$LIVE_DBHOST $LIVE_DB < $LIVE_DEST/releases/$PREV/db.sql"
                    fi
                elif [ "$DB_TYPE" = "mysql" ]; then
                    mysql -u "$TEST_DBUSER" "--password=$TEST_DBPASS" "--host=$TEST_DBHOST" "$TEST_DB" < "./releases/$PREV/db.sql"
                    if [ "$LIVE_SERVER" = "localhost" ]; then
                        mysql -u "$LIVE_DBUSER" --password="$LIVE_DBPASS" --host="$LIVE_DBHOST" "$LIVE_DB" < "$LIVE_DEST/releases/$PREV/db.sql"
                    else
                        ssh "$LIVE_USER@$LIVE_SERVER" "mysql -u $LIVE_DBUSER --password=$LIVE_DBPASS --host=$LIVE_DBHOST $LIVE_DB < $LIVE_DEST/releases/$PREV/db.sql"
                    fi
                fi
            fi

            echo -e "\nDone!\n"
        fi
    fi
elif [ "$ACTION" = "setup" ]; then
    if [ ! -d "current" ]; then
        echo -e "\nCreating local files and folders..."
        mkdir ./releases
        mkdir ./releases/current
        ln -s ./releases/current current
        echo -e "\nSetup complete\n"
    else
        echo -e "\nIt appears the initial files and directories have already been set up.\n"
    fi
elif [ "$ACTION" = "check" ]; then
    if [ -d "current" ]; then
        DIRS="$(ls ./releases)"
        if [ "$DIRS" = "current" ]; then
            echo -e "\nThis application has not been deployed yet.\n"
        else
            get_current
            echo -e "\nLast Deployed: $(date --date="1970-01-01 $CURRENT sec GMT")\n"
        fi
    else
        echo -e "\nThis application has not been set up or deployed yet.\n"
    fi
else
    echo -e "\nPlease select an option. ./bdeploy -h for help.\n"
    exit 0
fi
